# -*- coding: utf-8 -*-
"""wintec_paper_25_EDA.ipynb

Automatically generated by Colab.

"""

# EDA Figure 8

!pip install pandas matplotlib --quiet

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

uploaded = files.upload()
filename = list(uploaded.keys())[0]
df = pd.read_csv(filename)

if 'pm25value' in df.columns:
    df = df.rename(columns={
        'pm25value': 'PM2.5 (ug/m3)',
        'pm10value': 'PM10 (ug/m3)',
        'atvalue': 'Temperature (C)',
        'year': 'Year'
    })
data = df[['PM10 (ug/m3)', 'Temperature (C)', 'Year']].dropna()
#data = df[['PM2.5 (ug/m3)', 'Temperature (C)', 'Year']].dropna() # change to pm2.5 if you want to show it

plt.figure(figsize=(12, 6))
for year, marker, color in zip([2023, 2024], ['o', 's'], ['orange', 'red']):
    year_data = data[data['Year'] == year]
    plt.scatter(
        year_data['Temperature (C)'],
        year_data['PM10 (ug/m3)'],
        label=str(year),
        alpha=0.7,
        s=40,
        marker=marker,
        color=color
    )

plt.xlabel("Temperature (C)")
plt.ylabel("PM10 (ug/m3)")
plt.legend(title="Year")
plt.grid(True, linestyle='--', linewidth=0.5, alpha=0.6)
plt.tight_layout()
plt.show()

#EDA 14 days and 30 days

# Install requirements
!pip install pandas matplotlib --quiet

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# Upload Claudelands and Rotokauri datasets
uploaded = files.upload()
filenames = list(uploaded.keys())

# Identify and prepare PM2.5 & PM10
def prepare_data(file):
    df = pd.read_csv(file)
    if 'pm25value' in df.columns:
        location = 'Claudelands'
        df = df.rename(columns={'date': 'Date', 'pm25value': 'PM2.5', 'pm10value': 'PM10'})
    else:
        location = 'Rotokauri'
        df = df.rename(columns={'Date': 'Date', 'PM2.5 (ug/m3)': 'PM2.5', 'PM10 (ug/m3)': 'PM10'})

    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df = df[['Date', 'PM2.5', 'PM10']].dropna()
    df['Year'] = df['Date'].dt.year
    df['Month'] = df['Date'].dt.month
    df['Location'] = location
    return df

# Load and assign
df1 = prepare_data(filenames[0])
df2 = prepare_data(filenames[1])
claudelands_df = df1 if df1['Location'].iloc[0] == 'Claudelands' else df2
rotokauri_df = df2 if df1['Location'].iloc[0] == 'Claudelands' else df1

# Rolling processing
def process_rolling(df, pollutant, days):
    df = df.set_index('Date').sort_index()
    series = df[[pollutant]].resample('D').mean().interpolate()
    series['Rolling Mean'] = series[pollutant].rolling(window=days, min_periods=1).mean()
    series['Rolling Std'] = series[pollutant].rolling(window=days, min_periods=1).std()
    return series

# Plotting
def plot_trend(df, location, year, color, pollutant, window):
    plt.figure(figsize=(14, 5))
    plt.plot(df.index, df[pollutant], label=f'Observed ({location} {year})', color=color, linewidth=1)
    plt.plot(df.index, df['Rolling Mean'], 'b--', label=f'{window}-Day Rolling Mean')
    plt.plot(df.index, df['Rolling Std'], 'r--', label=f'{window}-Day Rolling Std Dev')
    plt.title(f"{pollutant} {window}-Day Rolling Trend â€“ {location} {year}")
    plt.xlabel("Date")
    plt.ylabel(f"{pollutant} (Âµg/mÂ³)")
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Settings
windows = [14, 30]
pollutants = ['PM2.5', 'PM10']
locations = [('Claudelands', claudelands_df, 'green'), ('Rotokauri', rotokauri_df, 'orange')]
years = [2023, 2024]

# Generate all plots
for location, df, color in locations:
    for pollutant in pollutants:
        for year in years:
            for window in windows:
                subset = df[(df['Year'] == year) & (df['Month'] >= 5)]
                rolled = process_rolling(subset, pollutant, window)
                plot_trend(rolled, location, year, color, pollutant, window)

#Forecasting - ignore

!pip install prophet pandas matplotlib --quiet

# Step 2: Import libraries
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from google.colab import files

# Step 3: Upload files (Claudelands + Rotokauri)
uploaded = files.upload()
filenames = list(uploaded.keys())

# Step 4: Function to prepare data for Prophet
def prepare_for_prophet(df, date_col, value_col):
    df = df[[date_col, value_col]].dropna()
    df = df.rename(columns={date_col: 'ds', value_col: 'y'})
    df['ds'] = pd.to_datetime(df['ds'], errors='coerce')
    return df.dropna()

# Step 5: Forecast function
def forecast_plot(df, label, periods=90):
    print(f"\nðŸ“ˆ Forecasting {label}")
    model = Prophet()
    model.fit(df)

    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)

    fig1 = model.plot(forecast)
    plt.title(f"{label} Forecast")
    plt.xlabel("Date")
    plt.ylabel(label)
    plt.grid(True)
    plt.show()

    fig2 = model.plot_components(forecast)
    plt.show()

    # Optional export
    export = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
    export.to_csv(f"{label}_forecast.csv", index=False)
    print(f"Exported: {label}_forecast.csv")

# Step 6: Read both datasets
df1 = pd.read_csv(filenames[0])
df2 = pd.read_csv(filenames[1])

# Identify Claudelands and Rotokauri
if 'pm25value' in df1.columns:
    claudelands_df, rotokauri_df = df1, df2
else:
    claudelands_df, rotokauri_df = df2, df1

# Step 7: Forecast all four cases
# PM2.5
claud_pm25 = prepare_for_prophet(claudelands_df, 'date', 'pm25value')
roto_pm25 = prepare_for_prophet(rotokauri_df, 'Date', 'PM2.5 (ug/m3)')

forecast_plot(claud_pm25, "Claudelands PM2.5")
forecast_plot(roto_pm25, "Rotokauri PM2.5")

# PM10
claud_pm10 = prepare_for_prophet(claudelands_df, 'date', 'pm10value')
roto_pm10 = prepare_for_prophet(rotokauri_df, 'Date', 'PM10 (ug/m3)')

forecast_plot(claud_pm10, "Claudelands PM10")
forecast_plot(roto_pm10, "Rotokauri PM10")

import matplotlib.dates as mdates

# Plot with colored zones
def plot_forecast_with_highlight(model, forecast, df, label):
    plt.figure(figsize=(14, 6))

    # Plot full forecast
    model.plot(forecast, xlabel='Date', ylabel=label)

    # Determine cutoff point
    last_obs_date = df['ds'].max()
    plt.axvline(last_obs_date, color='gray', linestyle='--', label='Forecast Start')

    # Shade forecast region
    plt.axvspan(last_obs_date, forecast['ds'].max(), color='orange', alpha=0.1, label='Forecast Period')

    # Improve x-tick labels
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b-%Y'))
    plt.gcf().autofmt_xdate()

    plt.title(f"{label} Forecast with Observed vs Forecast Highlighted")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

plot_forecast_with_highlight(model_claud_pm25, forecast_claud_pm25, claud_pm25, "Claudelands PM2.5")
