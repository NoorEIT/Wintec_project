# -*- coding: utf-8 -*-
"""wintec_research25_Supervised.ipynb

Automatically generated by Colab.

Original file is located at
    
"""

# Final -> Unsupervised (get clusters) > get clusters. Use clusters to train supervised (claud) to predict (roto)
!pip install pandas matplotlib seaborn scikit-learn --quiet

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from google.colab import files

uploaded = files.upload()
filenames = list(uploaded.keys())

def prepare_dataset(file):
    df = pd.read_csv(file)
    if 'pm25value' in df.columns:
        df = df.rename(columns={
            'date': 'Date',
            'pm25value': 'PM2.5',
            'pm10value': 'PM10',
            'atvalue': 'Temperature (C)'
        })
    else:
        df = df.rename(columns={
            'Date': 'Date',
            'PM2.5 (ug/m3)': 'PM2.5',
            'PM10 (ug/m3)': 'PM10'
        })
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    return df[['Date', 'PM2.5', 'PM10', 'Temperature (C)']].dropna()

claud_df = prepare_dataset(filenames[0])
roto_df = prepare_dataset(filenames[1])

claud_df['AQI'] = claud_df[['PM2.5', 'PM10']].max(axis=1)
kmeans = KMeans(n_clusters=3, random_state=42)
claud_df['AQI_Cluster'] = kmeans.fit_predict(claud_df[['AQI']])
mean_aqi = claud_df.groupby('AQI_Cluster')['AQI'].mean().sort_values()
relabel_map = {old: new for new, old in enumerate(mean_aqi.index)}
claud_df['AQI_Label'] = claud_df['AQI_Cluster'].map(relabel_map)

X_train = claud_df[['PM2.5', 'PM10', 'Temperature (C)', 'AQI']]
y_train = claud_df['AQI_Label']

roto_df['AQI'] = roto_df[['PM2.5', 'PM10']].max(axis=1)
roto_df['AQI_Cluster'] = kmeans.predict(roto_df[['AQI']])
roto_df['AQI_Label'] = roto_df['AQI_Cluster'].map(relabel_map)

X_test = roto_df[['PM2.5', 'PM10', 'Temperature (C)', 'AQI']]
y_test = roto_df['AQI_Label']

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    'Random Forest': RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42),
    'SVM': SVC(kernel='rbf', C=1, gamma='scale'),
    'KNN': KNeighborsClassifier(n_neighbors=5),
    'Decision Tree': DecisionTreeClassifier(max_depth=5, random_state=42)
}

for name, model in models.items():
    print(f"\n Model: {name}")
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)

    acc = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {acc:.3f}")
    print(classification_report(y_test, y_pred, target_names=['Very Good', 'Good', 'Moderate']))

    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(4.5, 3.5))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=['Very Good', 'Good', 'Moderate'],
                yticklabels=['Very Good', 'Good', 'Moderate'])
    plt.title(f"Confusion Matrix â€“ {name}")
    plt.xlabel("Predicted")
    plt.ylabel("True")
    plt.tight_layout()
    plt.show()
