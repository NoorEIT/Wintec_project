# -*- coding: utf-8 -*-
"""Wintec_paper25_clustering.ipynb

Automatically generated by Colab.

Original file is located at
  
"""

# ELBOW
!pip install pandas scikit-learn matplotlib --quiet

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from google.colab import files

uploaded = files.upload()
filenames = list(uploaded.keys())
if len(filenames) != 2:
    raise ValueError("Please upload exactly TWO files.")
def standardize_columns(df):
    if 'pm25value' in df.columns:
        df = df.rename(columns={
            'pm25value': 'PM2.5 (ug/m3)',
            'pm10value': 'PM10 (ug/m3)',
            'atvalue': 'Temperature (C)'
        })
    return df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']].dropna()

# Load and preprocess
df1 = pd.read_csv(filenames[0])
df2 = pd.read_csv(filenames[1])
loc1 = filenames[0].replace(".csv", "")
loc2 = filenames[1].replace(".csv", "")
data1 = standardize_columns(df1)
data2 = standardize_columns(df2)
combined = pd.concat([data1, data2], ignore_index=True)

# WCSS (elbow) function
def calculate_wcss(data, max_k=10):
    wcss = []
    for k in range(1, max_k):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data)
        wcss.append(kmeans.inertia_)
    return wcss

# Calculate WCSS
wcss_1 = calculate_wcss(data1)
wcss_2 = calculate_wcss(data2)
wcss_combined = calculate_wcss(combined)

# Plot elbow curves
plt.figure(figsize=(15, 4))

plt.subplot(1, 3, 1)
plt.plot(range(1, 10), wcss_1, marker='o', color='blue')
#plt.title(f'{loc1} Elbow Method')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')

plt.subplot(1, 3, 2)
plt.plot(range(1, 10), wcss_2, marker='o', color='green')
#plt.title(f'{loc2} Elbow Method')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')

plt.subplot(1, 3, 3)
plt.plot(range(1, 10), wcss_combined, marker='o', color='purple')
#plt.title('Combined Elbow Method')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from google.colab import files

uploaded = files.upload()
filename = list(uploaded.keys())[0]
df = pd.read_csv(filename)

# Rename if Claudelands format
if 'pm25value' in df.columns:
    df = df.rename(columns={
        'pm25value': 'PM2.5 (ug/m3)',
        'pm10value': 'PM10 (ug/m3)',
        'atvalue': 'Temperature (C)'
    })

data = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']].dropna()
data['AQI'] = data[['PM2.5 (ug/m3)', 'PM10 (ug/m3)']].max(axis=1)

scaler = StandardScaler()
aqi_scaled = scaler.fit_transform(data[['AQI']])
kmeans = KMeans(n_clusters=3, random_state=42)
data['Cluster'] = kmeans.fit_predict(aqi_scaled)

cluster_means = data.groupby('Cluster')['AQI'].mean().sort_values()
relabel_map = {old: new for new, old in enumerate(cluster_means.index)}
data['Relabeled Cluster'] = data['Cluster'].map(relabel_map)

summary = []
for cluster_id in [0, 1, 2]:
    cluster_data = data[data['Relabeled Cluster'] == cluster_id]
    summary.append({
        'Cluster': f'Cluster {cluster_id}',
        'PM2.5 Range': f"{cluster_data['PM2.5 (ug/m3)'].min():.1f}–{cluster_data['PM2.5 (ug/m3)'].max():.1f}",
        'PM2.5 Mean': f"{cluster_data['PM2.5 (ug/m3)'].mean():.1f}",
        'PM10 Range': f"{cluster_data['PM10 (ug/m3)'].min():.1f}–{cluster_data['PM10 (ug/m3)'].max():.1f}",
        'PM10 Mean': f"{cluster_data['PM10 (ug/m3)'].mean():.1f}",
        'Temp Range': f"{cluster_data['Temperature (C)'].min():.1f}–{cluster_data['Temperature (C)'].max():.1f}",
        'Temp Mean': f"{cluster_data['Temperature (C)'].mean():.1f}",
        'AQI Range': f"{cluster_data['AQI'].min():.1f}–{cluster_data['AQI'].max():.1f}",
        'AQI Mean': f"{cluster_data['AQI'].mean():.1f}",
    })

summary_df = pd.DataFrame(summary)
display(summary_df)

# Plot AQI histogram by AQI-only clusters
colors = ['#b3e283', '#ffa756', '#ff6b81']
labels = ['Cluster 0 (Very Good)', 'Cluster 1 (Good)', 'Cluster 2 (Moderate)']

plt.figure(figsize=(10, 6))
for cluster_id in [0, 1, 2]:
    cluster_data = data[data['Relabeled Cluster'] == cluster_id]
    plt.hist(cluster_data['AQI'], bins=30, alpha=0.6, label=labels[cluster_id], color=colors[cluster_id], edgecolor='black')

plt.xlabel("AQI")
plt.ylabel("Frequency")
#plt.title("AQI Distribution by Cluster (Clustering on AQI Only)")
plt.legend()
plt.grid(False)
plt.tight_layout()
plt.show()

!pip install pandas scikit-learn matplotlib --quiet

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from google.colab import files

uploaded = files.upload()
filename = list(uploaded.keys())[0]
df = pd.read_csv(filename)

# Rename columns if in Claudelands format
if 'pm25value' in df.columns:
    df = df.rename(columns={
        'pm25value': 'PM2.5 (ug/m3)',
        'pm10value': 'PM10 (ug/m3)',
        'atvalue': 'Temperature (C)'
    })

data = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']].dropna()
data['AQI'] = data[['PM2.5 (ug/m3)', 'PM10 (ug/m3)']].max(axis=1)

# Cluster on AQI only
scaler = StandardScaler()
aqi_scaled = scaler.fit_transform(data[['AQI']])
kmeans = KMeans(n_clusters=3, random_state=42)
data['Cluster'] = kmeans.fit_predict(aqi_scaled)

# Relabel clusters by AQI mean
aqi_cluster_means = data.groupby('Cluster')['AQI'].mean().sort_values()
relabel_map = {old: new for new, old in enumerate(aqi_cluster_means.index)}
data['Relabeled Cluster'] = data['Cluster'].map(relabel_map)

# Create summary table
summary = []
for cluster_id in [0, 1, 2]:
    cluster_data = data[data['Relabeled Cluster'] == cluster_id]
    summary.append({
        'Cluster': f'Cluster {cluster_id}',
        'PM2.5 Range': f"{cluster_data['PM2.5 (ug/m3)'].min():.1f}–{cluster_data['PM2.5 (ug/m3)'].max():.1f}",
        'PM2.5 Mean': f"{cluster_data['PM2.5 (ug/m3)'].mean():.1f}",
        'PM10 Range': f"{cluster_data['PM10 (ug/m3)'].min():.1f}–{cluster_data['PM10 (ug/m3)'].max():.1f}",
        'PM10 Mean': f"{cluster_data['PM10 (ug/m3)'].mean():.1f}",
        'Temp Range': f"{cluster_data['Temperature (C)'].min():.1f}–{cluster_data['Temperature (C)'].max():.1f}",
        'Temp Mean': f"{cluster_data['Temperature (C)'].mean():.1f}",
        'AQI Range': f"{cluster_data['AQI'].min():.1f}–{cluster_data['AQI'].max():.1f}",
        'AQI Mean': f"{cluster_data['AQI'].mean():.1f}",
    })

summary_df = pd.DataFrame(summary)
display(summary_df)

# Plot histogram by AQI cluster
plt.figure(figsize=(10, 6))
colors = ['#b3e283', '#ffa756', '#ff6b81']
labels = ['Cluster 0 (Very Good)', 'Cluster 1 (Good)', 'Cluster 2 (Moderate)']

for cluster_id in [0, 1, 2]:
    cluster_data = data[data['Relabeled Cluster'] == cluster_id]
    plt.hist(cluster_data['AQI'], bins=30, alpha=0.6, label=labels[cluster_id], color=colors[cluster_id], edgecolor='black')

plt.xlabel("AQI")
plt.ylabel("Frequency")
plt.legend()
plt.grid(False)
plt.tight_layout()
plt.show()

#You should upload two files

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from google.colab import files

uploaded = files.upload()
filenames = list(uploaded.keys())

standardized_dfs = []

for file in filenames:
    df = pd.read_csv(file)

    if 'pm25value' in df.columns and 'pm10value' in df.columns and 'atvalue' in df.columns:
        df = df.rename(columns={
            'pm25value': 'PM2.5 (ug/m3)',
            'pm10value': 'PM10 (ug/m3)',
            'atvalue': 'Temperature (C)'
        })
    elif 'PM2.5 (ug/m3)' in df.columns and 'PM10 (ug/m3)' in df.columns and 'Temperature (C)' in df.columns:
        pass
    else:
        raise ValueError(f"File {file} does not contain required columns.")

    subset = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']].dropna()
    standardized_dfs.append(subset)

if len(standardized_dfs) != 2:
    raise ValueError("Please upload exactly TWO files (Claudelands and Rotokauri).")

combined_data = pd.concat(standardized_dfs, ignore_index=True)

kmeans = KMeans(n_clusters=3, random_state=42)
combined_data['Cluster'] = kmeans.fit_predict(combined_data)

combined_data['AQI'] = combined_data[['PM2.5 (ug/m3)', 'PM10 (ug/m3)']].max(axis=1)

cluster_means = combined_data.groupby('Cluster')['AQI'].mean().sort_values()
relabel_map = {old: new for new, old in enumerate(cluster_means.index)}
combined_data['Relabeled Cluster'] = combined_data['Cluster'].map(relabel_map)

label_map = {
    0: 'Cluster 0 (very good air quality)',
    1: 'Cluster 1 (good air quality)',
    2: 'Cluster 2 (moderate air quality)'
}

summary = []
for cluster_id in [0, 1, 2]:
    cluster_data = combined_data[combined_data['Relabeled Cluster'] == cluster_id]
    summary.append({
        'Cluster': label_map[cluster_id],
        'PM2.5 Range': f"{cluster_data['PM2.5 (ug/m3)'].min():.1f}–{cluster_data['PM2.5 (ug/m3)'].max():.1f}",
        'PM2.5 Mean': f"{cluster_data['PM2.5 (ug/m3)'].mean():.1f}",
        'PM10 Range': f"{cluster_data['PM10 (ug/m3)'].min():.1f}–{cluster_data['PM10 (ug/m3)'].max():.1f}",
        'PM10 Mean': f"{cluster_data['PM10 (ug/m3)'].mean():.1f}",
        'Temp Range': f"{cluster_data['Temperature (C)'].min():.1f}–{cluster_data['Temperature (C)'].max():.1f}",
        'Temp Mean': f"{cluster_data['Temperature (C)'].mean():.1f}",
        'AQI Range': f"{cluster_data['AQI'].min():.1f}–{cluster_data['AQI'].max():.1f}",
        'AQI Mean': f"{cluster_data['AQI'].mean():.1f}",
    })

summary_df = pd.DataFrame(summary)
display(summary_df)

# Plot AQI histogram by cluster
plt.figure(figsize=(10, 6))
colors = ['#b3e283', '#ffa756', '#ff6b81']
labels = ['Cluster 0', 'Cluster 1', 'Cluster 2']

for cluster_id in [0, 1, 2]:
    cluster_data = combined_data[combined_data['Relabeled Cluster'] == cluster_id]
    plt.hist(cluster_data['AQI'], bins=30, alpha=0.7, label=labels[cluster_id], color=colors[cluster_id], edgecolor='black')

plt.xlabel("AQI")
plt.ylabel("Frequency")
plt.legend()
plt.grid(False)
plt.tight_layout()
plt.show()

# Figure 11
# OPtions
#One time upload
# Then upload

!pip install pandas scikit-learn matplotlib --quiet

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from google.colab import files

uploaded = files.upload()
filenames = list(uploaded.keys())

def process_and_cluster(df):
    if 'pm25value' in df.columns:
        df = df.rename(columns={
            'pm25value': 'PM2.5 (ug/m3)',
            'pm10value': 'PM10 (ug/m3)',
            'atvalue': 'Temperature (C)'
        })
    df = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']].dropna()
    df['AQI'] = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)']].max(axis=1)

    kmeans = KMeans(n_clusters=3, random_state=42)
    df['Cluster'] = kmeans.fit_predict(df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']])
    cluster_means = df.groupby('Cluster')['AQI'].mean().sort_values()
    relabel_map = {old: new for new, old in enumerate(cluster_means.index)}
    df['Relabeled Cluster'] = df['Cluster'].map(relabel_map)
    return df

datasets = []
names = []

for file in filenames:
    df = pd.read_csv(file)
    processed_df = process_and_cluster(df)
    datasets.append(processed_df)
    name = file.replace("_dataset.csv", "").replace(".csv", "")
    names.append(name)

# Define visuals
markers = {0: "o", 1: "s", 2: "D"}  # Circle, Square, Diamond
palette = {0: '#fdd76e', 1: '#f79862', 2: '#f77ca3'}
labels = {0: 'Very Good', 1: 'Good', 2: 'Moderate'}

# Plot for each dataset
for data, name in zip(datasets, names):
    plt.figure(figsize=(10, 6))
    for cluster_id in [0, 1, 2]:
        cluster_data = data[data['Relabeled Cluster'] == cluster_id]
        plt.scatter(
            cluster_data['Temperature (C)'],
            cluster_data['AQI'],
            alpha=0.75,
            label=labels[cluster_id],
            color=palette[cluster_id],
            edgecolor='black',
            s=60,
            marker=markers[cluster_id]
        )
    plt.xlabel("Temperature (°C)", fontsize=12)
    plt.ylabel("AQI", fontsize=12)
   # plt.title(f"AQI vs Temperature – {name}", fontsize=14, weight='bold')
    plt.grid(True, linestyle='--', linewidth=0.5, alpha=0.6)
    plt.legend(title="Cluster")
    plt.tight_layout()
    plt.show()

#Figure 11 - merge
!pip install pandas scikit-learn matplotlib --quiet

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from google.colab import files

uploaded = files.upload()
filenames = list(uploaded.keys())

# Read and standardize each file
dfs = []
for file in filenames:
    df = pd.read_csv(file)
    if 'pm25value' in df.columns:
        df = df.rename(columns={
            'pm25value': 'PM2.5 (ug/m3)',
            'pm10value': 'PM10 (ug/m3)',
            'atvalue': 'Temperature (C)'
        })
    df = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']].dropna()
    df['AQI'] = df[['PM2.5 (ug/m3)', 'PM10 (ug/m3)']].max(axis=1)
    df['Source'] = file.split('_')[0]  # e.g., 'Claudelands' or 'Rotokauri'
    dfs.append(df)

# Merge both datasets
combined_data = pd.concat(dfs, ignore_index=True)

# KMeans clustering on all features
kmeans = KMeans(n_clusters=3, random_state=42)
combined_data['Cluster'] = kmeans.fit_predict(combined_data[['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'Temperature (C)']])

# Relabel clusters by AQI mean
cluster_means = combined_data.groupby('Cluster')['AQI'].mean().sort_values()
relabel_map = {old: new for new, old in enumerate(cluster_means.index)}
combined_data['Relabeled Cluster'] = combined_data['Cluster'].map(relabel_map)

# Plot settings
markers = {0: "o", 1: "s", 2: "D"}  # Circle, Square, Diamond
palette = {0: '#fdd76e', 1: '#f79862', 2: '#f77ca3'}
labels = {0: 'Very Good', 1: 'Good', 2: 'Moderate'}

# Plot: Merged figure
plt.figure(figsize=(10, 6))
for cluster_id in [0, 1, 2]:
    cluster_data = combined_data[combined_data['Relabeled Cluster'] == cluster_id]
    plt.scatter(
        cluster_data['Temperature (C)'],
        cluster_data['AQI'],
        label=labels[cluster_id],
        marker=markers[cluster_id],
        s=60,
        alpha=0.75,
        color=palette[cluster_id],
        edgecolor='black'
    )

plt.xlabel("Temperature (°C)", fontsize=12)
plt.ylabel("AQI", fontsize=12)
#plt.title("Combined AQI vs Temperature Clustering – Claudelands & Rotokauri", fontsize=14, weight='bold')
plt.legend(title="Cluster")
plt.grid(True, linestyle='--', linewidth=0.5, alpha=0.6)
plt.tight_layout()
plt.show()
